--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';
SET default_table_access_method = heap;

-- Tabela de Usuários (Empresas/Administradores)
CREATE TABLE public.usuarios (
    cod_usuario integer NOT NULL,
    nome_usuario character varying(150) NOT NULL,
    nome_empresa character varying(150) NOT NULL,
    cnpj character varying(18) NOT NULL,
    email character varying(100) NOT NULL,
    senha_hash character varying(255) NOT NULL,
    telefone_contato character varying(20),
    logo_url character varying(255),
    codigo_ibge character varying(10),
    cep character varying(9),
    logradouro character varying(150),
    numero character varying(10),
    complemento character varying(100),
    bairro character varying(100),
    cidade character varying(100),
    uf character varying(2),
    ativo boolean DEFAULT true,
    role character varying(50) NOT NULL,
    plano_assinatura_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer
);

ALTER TABLE public.usuarios OWNER TO postgres;

CREATE SEQUENCE public.usuarios_cod_usuario_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.usuarios_cod_usuario_seq OWNED BY public.usuarios.cod_usuario;
ALTER TABLE ONLY public.usuarios ALTER COLUMN cod_usuario SET DEFAULT nextval('public.usuarios_cod_usuario_seq'::regclass);
ALTER TABLE ONLY public.usuarios ADD CONSTRAINT usuarios_email_key UNIQUE (email);
ALTER TABLE ONLY public.usuarios ADD CONSTRAINT usuarios_pkey PRIMARY KEY (cod_usuario);
ALTER TABLE ONLY public.usuarios ADD CONSTRAINT fk_usuarios_plano_assinatura FOREIGN KEY (plano_assinatura_id) REFERENCES public.planos_assinatura(id_plano) ON DELETE SET NULL;


-- Tabela de Clientes
CREATE TABLE public.clientes (
    cod_cliente integer NOT NULL,
    cpf character varying(14) NOT NULL,
    nome_cliente character varying(150) NOT NULL,
    data_nascimento date,
    email character varying(100),
    telefone character varying(20) NOT NULL,
    senha_hash character varying(255),
    genero character varying(15),
    observacoes_gerais text,
    indicado_por integer,
    codigo_ibge character varying(10),
    cep character varying(9),
    logradouro character varying(150),
    numero character varying(10),
    complemento character varying(100),
    bairro character varying(100),
    cidade character varying(100),
    uf character varying(2),
    ativo boolean DEFAULT true,
    ultimo_servico date,
    total_gasto numeric(10,2) DEFAULT 0.00,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer
);

ALTER TABLE public.clientes OWNER TO postgres;

CREATE SEQUENCE public.clientes_cod_cliente_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.clientes_cod_cliente_seq OWNED BY public.clientes.cod_cliente;
ALTER TABLE ONLY public.clientes ALTER COLUMN cod_cliente SET DEFAULT nextval('public.clientes_cod_cliente_seq'::regclass);
ALTER TABLE ONLY public.clientes ADD CONSTRAINT clientes_cpf_key UNIQUE (cpf);
ALTER TABLE ONLY public.clientes ADD CONSTRAINT clientes_email_key UNIQUE (email);
ALTER TABLE ONLY public.clientes ADD CONSTRAINT clientes_pkey PRIMARY KEY (cod_cliente);
ALTER TABLE ONLY public.clientes ADD CONSTRAINT clientes_indicado_por_fkey FOREIGN KEY (indicado_por) REFERENCES public.clientes(cod_cliente);
ALTER TABLE ONLY public.clientes ADD CONSTRAINT fk_clientes_cod_usuario_empresa FOREIGN KEY (cod_usuario_empresa) REFERENCES public.usuarios(cod_usuario) ON DELETE CASCADE;
CREATE INDEX idx_clientes_cpf ON public.clientes USING btree (cpf);
CREATE INDEX idx_clientes_email ON public.clientes USING btree (email);


-- Tabela de Veículos
CREATE TABLE public.veiculos (
    cod_veiculo integer NOT NULL,
    marca character varying(50) NOT NULL,
    modelo character varying(50) NOT NULL,
    ano integer,
    cor character varying(30),
    placa character varying(8) NOT NULL,
    chassi character varying(17),
    renavam character varying(11),
    quilometragem_atual integer,
    observacoes text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer NOT NULL
);

ALTER TABLE public.veiculos OWNER TO postgres;

CREATE SEQUENCE public.veiculos_cod_veiculo_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.veiculos_cod_veiculo_seq OWNED BY public.veiculos.cod_veiculo;
ALTER TABLE ONLY public.veiculos ALTER COLUMN cod_veiculo SET DEFAULT nextval('public.veiculos_cod_veiculo_seq'::regclass);
ALTER TABLE ONLY public.veiculos ADD CONSTRAINT veiculos_chassi_key UNIQUE (chassi);
ALTER TABLE ONLY public.veiculos ADD CONSTRAINT veiculos_pkey PRIMARY KEY (cod_veiculo);
ALTER TABLE ONLY public.veiculos ADD CONSTRAINT veiculos_placa_key UNIQUE (placa);
ALTER TABLE ONLY public.veiculos ADD CONSTRAINT veiculos_renavam_key UNIQUE (renavam);
CREATE INDEX idx_veiculos_placa ON public.veiculos USING btree (placa);


-- Tabela de Serviços
CREATE TABLE public.servicos (
    cod_servico integer NOT NULL,
    nome_servico character varying(100) NOT NULL,
    descricao_servico text,
    duracao_minutos integer NOT NULL CHECK ((duracao_minutos > 0)),
    preco numeric(10,2) NOT NULL CHECK ((preco >= (0)::numeric)),
    categoria character varying(50) NOT NULL,
    ativo boolean DEFAULT true,
    custo_material numeric(10,2) DEFAULT 0.00 CHECK ((custo_material >= (0)::numeric)),
    custo_mao_de_obra numeric(10,2) DEFAULT 0.00 CHECK ((custo_mao_de_obra >= (0)::numeric)),
    garantia_dias integer,
    observacoes_internas text,
    imagem_url character varying(255),
    ordem_exibicao integer,
    requer_aprovacao boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer NOT NULL
);

ALTER TABLE public.servicos OWNER TO postgres;

CREATE SEQUENCE public.servicos_cod_servico_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.servicos_cod_servico_seq OWNED BY public.servicos.cod_servico;
ALTER TABLE ONLY public.servicos ALTER COLUMN cod_servico SET DEFAULT nextval('public.servicos_cod_servico_seq'::regclass);
ALTER TABLE ONLY public.servicos ADD CONSTRAINT servicos_pkey PRIMARY KEY (cod_servico);
CREATE INDEX idx_servicos_categoria ON public.servicos USING btree (categoria);


-- Tabela de Agendamentos
CREATE TABLE public.agendamentos (
    cod_agendamento integer NOT NULL,
    cliente_cod integer NOT NULL,
    servico_cod integer NOT NULL,
    veiculo_cod integer,
    usuario_responsavel_cod integer,
    data_hora_inicio timestamp without time zone NOT NULL,
    data_hora_fim timestamp without time zone,
    preco_total numeric(10,2) NOT NULL CHECK ((preco_total >= (0)::numeric)),
    status character varying(50) NOT NULL,
    tipo_agendamento character varying(50),
    forma_pagamento character varying(50),
    observacoes_agendamento text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer NOT NULL
);

ALTER TABLE public.agendamentos OWNER TO postgres;

CREATE SEQUENCE public.agendamentos_cod_agendamento_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.agendamentos_cod_agendamento_seq OWNED BY public.agendamentos.cod_agendamento;
ALTER TABLE ONLY public.agendamentos ALTER COLUMN cod_agendamento SET DEFAULT nextval('public.agendamentos_cod_agendamento_seq'::regclass);
ALTER TABLE ONLY public.agendamentos ADD CONSTRAINT agendamentos_pkey PRIMARY KEY (cod_agendamento);
ALTER TABLE ONLY public.agendamentos ADD CONSTRAINT agendamentos_cliente_cod_fkey FOREIGN KEY (cliente_cod) REFERENCES public.clientes(cod_cliente);
ALTER TABLE ONLY public.agendamentos ADD CONSTRAINT agendamentos_servico_cod_fkey FOREIGN KEY (servico_cod) REFERENCES public.servicos(cod_servico);
ALTER TABLE ONLY public.agendamentos ADD CONSTRAINT agendamentos_usuario_responsavel_cod_fkey FOREIGN KEY (usuario_responsavel_cod) REFERENCES public.usuarios(cod_usuario);
ALTER TABLE ONLY public.agendamentos ADD CONSTRAINT agendamentos_veiculo_cod_fkey FOREIGN KEY (veiculo_cod) REFERENCES public.veiculos(cod_veiculo);
CREATE INDEX idx_agendamentos_cliente_servico_veiculo ON public.agendamentos USING btree (cliente_cod, servico_cod, veiculo_cod);
CREATE INDEX idx_agendamentos_cod_usuario_empresa ON public.agendamentos USING btree (cod_usuario_empresa);
CREATE INDEX idx_agendamentos_data_inicio ON public.agendamentos USING btree (data_hora_inicio);
CREATE INDEX idx_agendamentos_status ON public.agendamentos USING btree (status);


-- Tabela de Avaliações
CREATE TABLE public.avaliacoes (
    cod_avaliacao integer NOT NULL,
    agendamento_cod integer NOT NULL,
    cliente_cod integer NOT NULL,
    nota integer NOT NULL CHECK (((nota >= 1) AND (nota <= 5))),
    comentario text,
    data_avaliacao timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    publicado boolean DEFAULT false,
    resposta_empresa text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer NOT NULL
);

ALTER TABLE public.avaliacoes OWNER TO postgres;

CREATE SEQUENCE public.avaliacoes_cod_avaliacao_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.avaliacoes_cod_avaliacao_seq OWNED BY public.avaliacoes.cod_avaliacao;
ALTER TABLE ONLY public.avaliacoes ALTER COLUMN cod_avaliacao SET DEFAULT nextval('public.avaliacoes_cod_avaliacao_seq'::regclass);
ALTER TABLE ONLY public.avaliacoes ADD CONSTRAINT avaliacoes_pkey PRIMARY KEY (cod_avaliacao);
ALTER TABLE ONLY public.avaliacoes ADD CONSTRAINT avaliacoes_agendamento_cod_fkey FOREIGN KEY (agendamento_cod) REFERENCES public.agendamentos(cod_agendamento);
ALTER TABLE ONLY public.avaliacoes ADD CONSTRAINT avaliacoes_cliente_cod_fkey FOREIGN KEY (cliente_cod) REFERENCES public.clientes(cod_cliente);
ALTER TABLE ONLY public.avaliacoes ADD CONSTRAINT fk_avaliacoes_usuario_empresa FOREIGN KEY (cod_usuario_empresa) REFERENCES public.usuarios(cod_usuario) ON DELETE CASCADE;
CREATE INDEX idx_avaliacoes_agendamento_cod ON public.avaliacoes USING btree (agendamento_cod);
CREATE INDEX idx_avaliacoes_cliente_cod ON public.avaliacoes USING btree (cliente_cod);
CREATE INDEX idx_avaliacoes_publicado ON public.avaliacoes USING btree (publicado);


-- Tabela de Configurações de Agenda
CREATE TABLE public.configuracoes_agenda (
    cod_configuracao integer NOT NULL,
    cod_usuario_empresa integer NOT NULL,
    tipo_regra character varying(50) NOT NULL,
    dia_semana integer,
    data_especifica date,
    hora_inicio time without time zone,
    hora_fim time without time zone,
    intervalo_minutos integer,
    descricao text,
    ativo boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE public.configuracoes_agenda OWNER TO postgres;

CREATE SEQUENCE public.configuracoes_agenda_cod_configuracao_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.configuracoes_agenda_cod_configuracao_seq OWNED BY public.configuracoes_agenda.cod_configuracao;
ALTER TABLE ONLY public.configuracoes_agenda ALTER COLUMN cod_configuracao SET DEFAULT nextval('public.configuracoes_agenda_cod_configuracao_seq'::regclass);
ALTER TABLE ONLY public.configuracoes_agenda ADD CONSTRAINT configuracoes_agenda_pkey PRIMARY KEY (cod_configuracao);
ALTER TABLE ONLY public.configuracoes_agenda ADD CONSTRAINT configuracoes_agenda_cod_usuario_empresa_fkey FOREIGN KEY (cod_usuario_empresa) REFERENCES public.usuarios(cod_usuario);
ALTER TABLE ONLY public.configuracoes_agenda ADD CONSTRAINT fk_config_agenda_usuario_empresa FOREIGN KEY (cod_usuario_empresa) REFERENCES public.usuarios(cod_usuario) ON DELETE CASCADE;
CREATE INDEX idx_config_agenda_data_especifica ON public.configuracoes_agenda USING btree (data_especifica);
CREATE INDEX idx_config_agenda_empresa_tipo ON public.configuracoes_agenda USING btree (cod_usuario_empresa, tipo_regra);


-- Tabela de Planos de Assinatura
CREATE TABLE public.planos_assinatura (
    id_plano integer NOT NULL,
    nome_plano character varying(100) NOT NULL,
    descricao text,
    valor_mensal numeric(10,2) NOT NULL CHECK ((valor_mensal >= (0)::numeric)),
    periodo_cobranca character varying(50),
    recursos_incluidos text,
    limite_usuarios integer,
    ativo boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    cod_usuario_empresa integer NOT NULL
);

ALTER TABLE public.planos_assinatura OWNER TO postgres;

CREATE SEQUENCE public.planos_assinatura_id_plano_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.planos_assinatura_id_plano_seq OWNED BY public.planos_assinatura.id_plano;
ALTER TABLE ONLY public.planos_assinatura ALTER COLUMN id_plano SET DEFAULT nextval('public.planos_assinatura_id_plano_seq'::regclass);
ALTER TABLE ONLY public.planos_assinatura ADD CONSTRAINT planos_assinatura_nome_plano_key UNIQUE (nome_plano);
ALTER TABLE ONLY public.planos_assinatura ADD CONSTRAINT planos_assinatura_pkey PRIMARY KEY (id_plano);


-- Tabela de Vinculação Veículos-Clientes (Histórico de Posse)
CREATE TABLE public.veiculos_clientes (
    cod_veiculo_cliente integer NOT NULL,
    cod_veiculo integer NOT NULL,
    cod_cliente integer NOT NULL,
    cod_usuario_empresa integer NOT NULL,
    data_inicio_posse date DEFAULT CURRENT_DATE NOT NULL,
    data_fim_posse date,
    observacoes text,
    is_proprietario_atual boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE public.veiculos_clientes OWNER TO postgres;

CREATE SEQUENCE public.veiculos_clientes_cod_veiculo_cliente_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.veiculos_clientes_cod_veiculo_cliente_seq OWNED BY public.veiculos_clientes.cod_veiculo_cliente;
ALTER TABLE ONLY public.veiculos_clientes ALTER COLUMN cod_veiculo_cliente SET DEFAULT nextval('public.veiculos_clientes_cod_veiculo_cliente_seq'::regclass);
ALTER TABLE ONLY public.veiculos_clientes ADD CONSTRAINT uq_veic_cli_empresa_veiculo_cliente_data UNIQUE (cod_usuario_empresa, cod_veiculo, cod_cliente, data_inicio_posse);
ALTER TABLE ONLY public.veiculos_clientes ADD CONSTRAINT veiculos_clientes_pkey PRIMARY KEY (cod_veiculo_cliente);
ALTER TABLE ONLY public.veiculos_clientes ADD CONSTRAINT veiculos_clientes_cod_cliente_fkey FOREIGN KEY (cod_cliente) REFERENCES public.clientes(cod_cliente) ON DELETE CASCADE;
ALTER TABLE ONLY public.veiculos_clientes ADD CONSTRAINT veiculos_clientes_cod_usuario_empresa_fkey FOREIGN KEY (cod_usuario_empresa) REFERENCES public.usuarios(cod_usuario) ON DELETE CASCADE;
ALTER TABLE ONLY public.veiculos_clientes ADD CONSTRAINT veiculos_clientes_cod_veiculo_fkey FOREIGN KEY (cod_veiculo) REFERENCES public.veiculos(cod_veiculo) ON DELETE CASCADE;
CREATE INDEX idx_veiculos_clientes_cliente_id ON public.veiculos_clientes USING btree (cod_cliente);
CREATE INDEX idx_veiculos_clientes_empresa_veiculo ON public.veiculos_clientes USING btree (cod_usuario_empresa, cod_veiculo);
CREATE INDEX idx_veiculos_clientes_proprietario_atual ON public.veiculos_clientes USING btree (is_proprietario_atual);
CREATE INDEX idx_veiculos_clientes_veiculo_id ON public.veiculos_clientes USING btree (cod_veiculo);

-- FIM do dump de tabelas existentes.
--
-- NOVAS TABELAS PROPOSTAS (produtos_estoque e equipamentos)
--

-- Tabela produtos_estoque (Consumíveis e Itens para Venda)
CREATE TABLE public.produtos_estoque (
    cod_produto SERIAL PRIMARY KEY,
    nome_produto VARCHAR(150) NOT NULL,
    descricao TEXT,
    tipo_produto VARCHAR(50) NOT NULL, -- Ex: 'Consumivel', 'Para Venda'
    quantidade_estoque INTEGER NOT NULL DEFAULT 0 CHECK (quantidade_estoque >= 0),
    unidade_medida VARCHAR(50),
    preco_custo NUMERIC(10,2) NOT NULL CHECK (preco_custo >= 0),
    preco_venda NUMERIC(10,2) CHECK (preco_venda >= 0),
    categoria VARCHAR(100),
    fornecedor VARCHAR(150),
    localizacao_estoque VARCHAR(100),
    estoque_minimo INTEGER DEFAULT 0 CHECK (estoque_minimo >= 0),
    data_ultima_entrada TIMESTAMP,
    data_ultima_saida TIMESTAMP,
    ativo BOOLEAN DEFAULT TRUE,
    cod_usuario_empresa INTEGER NOT NULL REFERENCES usuarios(cod_usuario),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Índices para produtos_estoque
CREATE INDEX idx_produtos_estoque_nome ON public.produtos_estoque (nome_produto);
CREATE INDEX idx_produtos_estoque_categoria ON public.produtos_estoque (categoria);
CREATE INDEX idx_produtos_estoque_tipo ON public.produtos_estoque (tipo_produto);
CREATE INDEX idx_produtos_estoque_empresa ON public.produtos_estoque (cod_usuario_empresa);

-- Tabela equipamentos (Ativos e Ferramentas)
CREATE TABLE public.equipamentos (
    cod_equipamento SERIAL PRIMARY KEY,
    nome_equipamento VARCHAR(150) NOT NULL,
    descricao TEXT,
    numero_serie VARCHAR(100) UNIQUE,
    data_aquisicao DATE NOT NULL,
    valor_aquisicao NUMERIC(10,2) NOT NULL CHECK (valor_aquisicao >= 0),
    vida_util_anos INTEGER,
    status_operacional VARCHAR(50) NOT NULL,
    proxima_manutencao DATE,
    localizacao_atual VARCHAR(100),
    responsavel_cod INTEGER REFERENCES usuarios(cod_usuario),
    ativo BOOLEAN DEFAULT TRUE,
    cod_usuario_empresa INTEGER NOT NULL REFERENCES usuarios(cod_usuario),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Índices para equipamentos
CREATE INDEX idx_equipamentos_nome ON public.equipamentos (nome_equipamento);
CREATE INDEX idx_equipamentos_numero_serie ON public.equipamentos (numero_serie);
CREATE INDEX idx_equipamentos_status ON public.equipamentos (status_operacional);
CREATE INDEX idx_equipamentos_empresa ON public.equipamentos (cod_usuario_empresa);

-- Tabela ordens_servico (Principal para as Ordens de Serviço)
CREATE TABLE public.ordens_servico (
    cod_ordem_servico SERIAL PRIMARY KEY,
    cod_cliente INTEGER NOT NULL REFERENCES clientes(cod_cliente),
    cod_veiculo INTEGER REFERENCES veiculos(cod_veiculo),
    data_abertura TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_conclusao_prevista DATE,
    data_conclusao_real TIMESTAMP,
    status_os VARCHAR(50) NOT NULL,
    valor_total_servicos NUMERIC(10,2) DEFAULT 0.00 CHECK (valor_total_servicos >= 0),
    valor_total_produtos NUMERIC(10,2) DEFAULT 0.00 CHECK (valor_total_produtos >= 0),
    valor_total_os NUMERIC(10,2) GENERATED ALWAYS AS (valor_total_servicos + valor_total_produtos) STORED,
    observacoes TEXT,
    cod_funcionario_responsavel INTEGER REFERENCES usuarios(cod_usuario),
    cod_usuario_empresa INTEGER NOT NULL REFERENCES usuarios(cod_usuario),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Índices para ordens_servico
CREATE INDEX idx_ordens_servico_cliente_veiculo ON public.ordens_servico (cod_cliente, cod_veiculo);
CREATE INDEX idx_ordens_servico_status ON public.ordens_servico (status_os);
CREATE INDEX idx_ordens_servico_data_abertura ON public.ordens_servico (data_abertura);
CREATE INDEX idx_ordens_servico_empresa ON public.ordens_servico (cod_usuario_empresa);

-- Tabela itens_ordem_servico (Detalhes dos itens de cada OS)
CREATE TABLE public.itens_ordem_servico (
    cod_item_os SERIAL PRIMARY KEY,
    cod_ordem_servico INTEGER NOT NULL REFERENCES ordens_servico(cod_ordem_servico) ON DELETE CASCADE,
    tipo_item VARCHAR(20) NOT NULL, -- 'Servico' ou 'Produto'
    cod_servico INTEGER REFERENCES servicos(cod_servico),
    cod_produto INTEGER REFERENCES produtos_estoque(cod_produto),
    quantidade NUMERIC(10,2) NOT NULL CHECK (quantidade > 0),
    valor_unitario NUMERIC(10,2) NOT NULL CHECK (valor_unitario >= 0),
    valor_total NUMERIC(10,2) GENERATED ALWAYS AS (quantidade * valor_unitario) STORED,
    observacoes_item TEXT,
    cod_usuario_empresa INTEGER NOT NULL REFERENCES usuarios(cod_usuario),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_tipo_item_relation CHECK (
        (tipo_item = 'Servico' AND cod_servico IS NOT NULL AND cod_produto IS NULL) OR
        (tipo_item = 'Produto' AND cod_produto IS NOT NULL AND cod_servico IS NULL)
    )
);

-- Índices para itens_ordem_servico
CREATE INDEX idx_itens_os_ordem_servico ON public.itens_ordem_servico (cod_ordem_servico);
CREATE INDEX idx_itens_os_servico ON public.itens_ordem_servico (cod_servico);
CREATE INDEX idx_itens_os_produto ON public.itens_ordem_servico (cod_produto);
CREATE INDEX idx_itens_os_empresa ON public.itens_ordem_servico (cod_usuario_empresa);

-- FIM do arquivo