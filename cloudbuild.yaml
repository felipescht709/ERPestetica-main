steps:
  # Passo 1: Construir a imagem de produção
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build'
    args:
      - 'build'
      - '-t'
      - 'southamerica-east1-docker.pkg.dev/$PROJECT_ID/syncro-auto-repo/backend:latest'
      - './mvp/backend' # Garante que o build aconteça dentro da pasta do backend

  # Passo 2: Enviar a imagem para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push'
    args: ['push', 'southamerica-east1-docker.pkg.dev/$PROJECT_ID/syncro-auto-repo/backend:latest']
    waitFor: ['Build'] # Boa prática: garante que o passo anterior terminou

  # Passo 3: Executar as migrações do Knex
  - name: 'southamerica-east1-docker.pkg.dev/$PROJECT_ID/syncro-auto-repo/backend:latest'
    id: 'Migrate'
    entrypoint: 'sh'
    secretEnv: ['DB_USER', 'DB_DATABASE', 'DB_PASSWORD']
    env:
      # Define as variáveis para o knexfile conectar via TCP ao proxy
      - 'DB_HOST=127.0.0.1'
      - 'DB_CONNECTION_NAME=${_DB_CONNECTION_NAME}' # Necessário para o knexfile
    args:
      - '-c'
      - |
        # Usar && garante que o script pare se um comando falhar
        apk add --no-cache wget && \
        echo "Baixando o Cloud SQL Proxy..." && \
        wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.0/cloud-sql-proxy.linux.amd64 -O /cloud_sql_proxy && \
        chmod +x /cloud_sql_proxy && \
        echo "Iniciando o Cloud SQL Proxy em background..." && \
        /cloud_sql_proxy ${_DB_CONNECTION_NAME} & \
        sleep 5 && \
        echo "Proxy iniciado. Executando migrações..." && \
        npx knex migrate:latest --knexfile ./knexfile.js
    waitFor: ['Push'] # Boa prática: usa a imagem que acabou de ser enviada

  # Passo 4: Fazer o deploy da nova imagem no Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/gcloud'
    id: 'Deploy'
    args:
      - 'run'
      - 'deploy'
      - 'erpestetica-main'
      - '--image'
      - 'southamerica-east1-docker.pkg.dev/$PROJECT_ID/syncro-auto-repo/backend:latest'
      - '--region'
      - 'southamerica-east1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances=${_DB_CONNECTION_NAME}'
      # ========================================================================
      # ▼▼▼ CORREÇÃO PRINCIPAL AQUI ▼▼▼
      # Define as duas variáveis que o knexfile.js dinâmico precisa para a conexão via socket.
      - '--set-env-vars=DB_SOCKET_PATH=/cloudsql,DB_CONNECTION_NAME=${_DB_CONNECTION_NAME}'
      # Limpa a declaração duplicada de secrets.
      - '--set-secrets=JWT_SECRET=JWT_SECRET:latest,DB_USER=DB_USER:latest,DB_DATABASE=DB_DATABASE:latest,DB_PASSWORD=postgres-password-erp:latest'
      # ========================================================================
    waitFor: ['Migrate'] # Boa prática: faz o deploy apenas se a migração for bem-sucedida

images:
  - 'southamerica-east1-docker.pkg.dev/$PROJECT_ID/syncro-auto-repo/backend:latest'

availableSecrets:
  secretManager:
  - versionName: projects/erp-estetica/secrets/JWT_SECRET/versions/latest
    env: 'JWT_SECRET'
  - versionName: projects/erp-estetica/secrets/DB_USER/versions/latest
    env: 'DB_USER'
  - versionName: projects/erp-estetica/secrets/DB_DATABASE/versions/latest
    env: 'DB_DATABASE'
  - versionName: projects/erp-estetica/secrets/postgres-password-erp/versions/latest
    env: 'DB_PASSWORD'